FROM ubuntu:16.04

RUN apt-get update -qq && apt-get install -qqy \
    git wget bzip2 file unzip libtool pkg-config cmake build-essential \
    automake yasm gettext autopoint vim python git-svn ninja-build \
    subversion && \
    apt-get clean -y && \
    rm -rf /var/lib/apt/lists/*


RUN git config --global user.name "LLVM MinGW" && \
    git config --global user.email root@localhost

WORKDIR /build

ARG CORES=4

ENV TOOLCHAIN_PREFIX=/opt/llvm-mingw

# Build LLVM
COPY build-llvm.sh .
RUN ./build-llvm.sh $TOOLCHAIN_PREFIX

ENV TOOLCHAIN_ARCHS="i686 x86_64 armv7 aarch64"

# Install the usual $TUPLE-clang binaries
COPY wrappers/*.sh ./wrappers/
COPY install-wrappers.sh .
RUN ./install-wrappers.sh $TOOLCHAIN_PREFIX

# Build MinGW-w64
COPY build-mingw-w64.sh .
RUN ./build-mingw-w64.sh $TOOLCHAIN_PREFIX

# Build compiler-rt
COPY build-compiler-rt.sh .
RUN ./build-compiler-rt.sh $TOOLCHAIN_PREFIX

# Build mingw-w64's extra libraries
COPY build-mingw-w64-libraries.sh .
RUN ./build-mingw-w64-libraries.sh $TOOLCHAIN_PREFIX

# Build C test applications
ENV PATH=$TOOLCHAIN_PREFIX/bin:$PATH

COPY test/*.c ./test/
RUN cd test && \
    for arch in $TOOLCHAIN_ARCHS; do \
        for test in hello hello-tls crt-test setjmp; do \
            $arch-w64-mingw32-clang $test.c -o $test-$arch.exe || exit 1; \
        done; \
    done

# Build libunwind/libcxxabi/libcxx
COPY build-libcxx.sh merge-archives.sh ./
RUN ./build-libcxx.sh $TOOLCHAIN_PREFIX

# Build C++ test applications
COPY test/*.cpp ./test/
RUN cd test && \
    for arch in $TOOLCHAIN_ARCHS; do \
        for test in hello-cpp hello-exception; do \
            $arch-w64-mingw32-clang++ $test.cpp -o $test-$arch.exe || exit 1; \
        done; \
    done

# Build libssp
COPY build-libssp.sh libssp-Makefile ./
RUN ./build-libssp.sh $TOOLCHAIN_PREFIX

# Strip the final toolchain. (This doesn't reduce the total docker image
# size as long as it is in a separate RUN layer though.)
COPY strip-llvm.sh .
RUN ./strip-llvm.sh $TOOLCHAIN_PREFIX

RUN apt-get update && apt-get install -y lua5.2 libtool automake autoconf autopoint make gettext pkg-config qt4-dev-tools qt5-default git subversion cmake cvs wine64-development-tools zip p7zip nsis bzip2 yasm ragel ant default-jdk protobuf-compiler dos2unix vim gperf

RUN git clone git://git.videolan.org/vlc.git && \
    cd vlc && \
    git checkout 9a3fef9 # known working hash

WORKDIR /build/vlc

RUN cd extras/tools && ./bootstrap && make -j$CORES
ENV PATH=/build/vlc/extras/tools/build/bin:$PATH

ENV VLC_ARCH=x86_64

RUN mkdir -p contrib/win32 && \
    cd contrib/win32 && \
    ../bootstrap --host=$VLC_ARCH-w64-mingw32 && \
    make -j$CORES fetch
RUN cd contrib/win32 && \
    make -j$CORES
RUN ./bootstrap
ENV PKG_CONFIG_LIBDIR=/build/vlc/contrib/$VLC_ARCH7-w64-mingw32/lib/pkgconfig
RUN mkdir win32 && \
    cd win32 && \
    ../extras/package/win32/configure.sh --host=$VLC_ARCH-w64-mingw32 && \
    make -j$CORES
# --build=x86_64-pc-linux-gnu LDFLAGS="/build/prefix/lib/clang/6.0.0/lib/windows/libclang_rt.builtins-arm.a" && \
RUN cd win32 && \
    make package-win-common
